dev.off()
graphics.off()
graphics.off()
dataFile
peasGreen.dt[areaName == "Malawi",]
peasGreen.dt
peasGreenRaw.dt[areaName == "Malawi",]
coef(yieldModelRecent)
library(help = lme4)
plot(yieldModelRecent)
randef
ranef
ranef(yieldModelRecent)
dotplot(ranef(yieldModelRecent))
dotplot(fixef(yieldModelRecent))
dir()
test
earth
earth(test ~T)
earth(test ~T, na.action = na.omit)
test = na.omit(test)
test
earth
?earth
ensembleImpute
test
test = na.omit(test)
test
T = 1:length(test)
earth(test ~T)
test.fit = earth(test ~T)
T
T2 = 1:56
T2
predict(test.fit, T2)
plot(test)
plot(1:56, c(test, rep(NA, 5)))
plot(1:56, c(test, rep(NA, 5)), type = "b")
predict(test.fit, T2)
points(predict(test.fit, T2), col = "red")
test
test
traceback()
forward.pass
test
data(wine)
dir()
dir()
test
na.omit(test)
auto.arima(na.omit(test))
forecast(auto.arima(na.omit(test)), h = 5)
plot(forecast(auto.arima(na.omit(test)), h = 5))
test
auto.arima(na.omit(test), seasonal = FALSE)
forecast(auto.arima(na.omit(test), seasonal = FALSE), h = 5)$mean
ensembleImpute(test)
test
ensembleImpute(test)
ensembleImpute(test)
auto.arima(na.omit(test))
forecast(auto.arima(na.omit(test)), 5)
ensembleImpute(test)
forecast(auto.arima(na.omit(test)), 5)
forecast(auto.arima(na.omit(test)), 5)$mean
c(forecast(auto.arima(na.omit(test)), 5)$mean)
ensembleImpute(test)
c(forecast(auto.arima(test[1:51]), 5)$mean)
forecast(auto.arima(test[1:51]), 5)$mean
ensembleImpute(test)
check
forecat(check)
forecast(check)
ensembleImpute(test)
ensembleImpute(test, TRUE)
traceback()
ensembleImpute(test, TRUE)
ensembleImpute(test, TRUE)
ensembleImpute(test, TRUE)
ensembleImpute(test, TRUE)
cd
cd = getwd()
setwd("C:\Users\kao\svn")
setwd("C:/Users/kao/svn")
dir()
install.packages("faosws", repos = NULL)
install.packages("faosws_0.3.1", repos = NULL)
install.packages("faosws_0.3.1.zip", repos = NULL)
library(faosws)
library(faosws)
?install.packages
remove.packages("faosws")
install.packages("faosws_0.3.1.zip", repos = NULL)
dir()
install.packages("faosws.zip", repos = NULL)
library(faosws)
remove.packages("faosws")
install.packages("faosws", repos = NULL)
?install.packages
getOption("pkgType")
?install.packages
install.packages("faosws", repos = NULL, type = "source")
install.package("RCurl")
install.packages("RCurl", repos = "http://cran.stat.auckland.ac.nz")
install.packages("faosws", repos = NULL, type = "source")
library(faosws)
dotplot(ranef(yieldModelRecent))
?bs
dir()
cd
setwd(cd)
dir()
cd
library(knitr)
install.packages("knitr", repos = "http://cran.stat.auckland.ac.nz")
knir
library(knitr)
dir()
knit("methodology.Rnw")
knit("methodology.Rnw")
knit("methodology.Rnw")
system("pdflatex methodology.tex")
library(knitr)
knit("methodology.Rnw")
knit("methodology.Rnw")
knit("methodology.Rnw")
knit("methodology.Rnw")
knit("methodology.Rnw")
knit("methodology.Rnw")
knit("methodology.Rnw")
knit("methodology.Rnw")
knit("methodology.Rnw")
(137000 * 2)/40
dir()
dir()
dir(pattern = "SUA")
dir(pattern = "SUA")
library(swsProductionImputation)
library(faoswsProductionImputation)
read.csv(file = "grapesSUA.csv")
test = read.csv(file = "grapesSUA.csv")
str(test)
test2 = merge(test, FAOcountryProfile[, c("FAOST_CODE", "FAO_TABLE_NAME")], by.x = "areaCode", by.y = "FAOST_CODE")
str(test2)
library(help = faoswsProductionImputation)
removeNoInfo
str(test2)
containInfo
library(help = faoswsProductionImputation)
library(faoswsFlag)
library(help = faoswsFlag)
colnames(test2)
library(help = faoswsFlag)
test = foo("wheatSUA.csv")
test = foo("wheatSUA.csv")
traceback()
test = read.csv(file = "wheatSUA.csv")
data.table(merge(test, FAOcountryProfile[, c("FAOST_CODE", "FAO_TABLE_NAME")], 
        by.x = "areaCode", by,y = "FAOST_CODE"))
str(test)
FAOcountryProfile[, c("FAOST_CODE", "FAO_TABLE_NAME")]
test2 = merge(test, FAOcountryProfile[, c("FAOST_CODE", "FAO_TABLE_NAME")], 
        by.x = "areaCode", by,y = "FAOST_CODE")
test
str(test)
test = foo("wheatSUA.csv")
traceback()
test = foo("wheatSUA.csv")
traceback()
containInfo
test = foo("wheatSUA.csv")
str(test)
test = foo("wheatSUA.csv")
str(tmp2)
str(check)
removeNoInfo(check, productionSymb = "productionSymb",
        productionValue = "productionValue", index = "areaName")
str(check)
containInfo(check, "productionSymb", "productionValue")
containInfo
removeNoInfo
colnames(check)
"productionSymb" %in% colnames(check)
"productionValue" %in% colnames(check)
"areaName" %in% colnames(check)
tmp2[, `:=`(info, containInfo(.SD, "productionSymb", "productionValue")), by = "areaName"]
check[, `:=`(info, containInfo(.SD, "productionSymb", "productionValue")), by = "areaName"]
str(check)
check[.SD, `:=`(info, containInfo(.SD, "productionSymb", "productionValue")), by = "areaName"]
check[, `:=`(info, rep(containInfo(.SD, "productionSymb", "productionValue")), NROW(.SD)), by = "areaName"]
check[, `:=`(info, rep(containInfo(.SD, "productionSymb", "productionValue"), NROW(.SD)), by = "areaName"]
check[, `:=`(info, rep(containInfo(.SD, "productionSymb", "productionValue"), NROW(.SD))), by = "areaName"]
methodology_paper/V3.1/
removeNoInfo = function(data, productionSymb, productionValue, index){
    data[, info := rep(containInfo(.SD, productionSymb, productionValue), NROW(.SD)),
         by = index]
    data = data[info == TRUE, ]
    data[, info := NULL]
    data
}
test = foo("wheatSUA.csv")
traceback()
test = foo("wheatSUA.csv")
str(check)
removeNoInfo(check, "productionSymb", "productionValue", "areaName")
str(check)
check[, info := rep(containInfo(.SD, "productionSymb", "productionValue"), NROW(.SD)), by = "areaName"]
str(check)
check2 = check[info == TRUE, ]
check2[, info := NULL]
str(check2)
test = foo("wheatSUA.csv")
removeNoInfo(data = check, productionSymb = "productionSymb",
        productionValue = "productionValue", index = "areaName")
traceback()
any(is.na(check$productionSymb))
test = foo("wheatSUA.csv")
str(check)
check[, "productionSymb", with = FALSE] == "M"
all(check[, "productionSymb", with = FALSE] == "M")
sum(check[, "productionValue", with = FALSE], na.rm = TRUE)
sum(check[, "productionValue", with = FALSE], na.rm = TRUE) == 0
removeNoInfo
containInfo
test = foo("wheatSUA.csv")
traceback()
test = foo("wheatSUA.csv")
test = foo("wheatSUA.csv")
str(test)
unique(test$areaCode)
test = foo("wheatSUA.csv")
test[, productionSymb]
str(test)
test[, "productionSymb"]
test = read.csv(file = "wheatSUA.csv", stringsAsFactors = FALSE)
test[, productionSymb]
str(test)
test = data.table(test)
test[, productionSymb]
test = foo("wheatSUA.csv")
str(tmp2)
containInfo
str(tmp3)
str(tmp4)
any(is.na(tmp$areaCode))
any(is.na(tmp$areaName))
any(is.na(tmp2$areaName))
str(tmp2)
removeNoInfo
removeNoInfo
data
?quote
?parse
?get
tmp3
dim(tmp3)
test = foo("wheatSUA.csv")
str(test)
str(test)
test = foo("wheatSUA.csv")
flag2weight
library(faoswsFlag)
flag2weight
?detach
detach(faoswsFlag)
detach("faoswsFlag")
detach("package:faoswsFlag")
flag2weight
library(faoswsFlag)
flag2weight
flag2weight
test = foo("wheatSUA.csv")
